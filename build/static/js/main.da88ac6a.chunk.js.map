{"version":3,"sources":["Componets/Layout.js","Componets/Header.js","Componets/Container.js","Componets/Card.js","App.js","serviceWorker.js","index.js"],"names":["Layout","this","props","children","React","Component","Header","class","href","title","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Container","Cards","cards","console","log","map","card","data","crosspost_parent","media","src","url","alt","width","height","App","state","Card","fetch","then","res","json","setState","catch","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAEqBA,G,6KAGf,OACE,6BACIC,KAAKC,MAAMC,c,GALaC,IAAMC,YCArBC,E,uKAEf,OACE,yBAAKC,MAAM,yDACT,uBAAGA,MAAM,eAAeC,KAAK,MAAOP,KAAKC,MAAMO,OAC/C,4BAAQF,MAAM,iBAAiBG,KAAK,SAASC,cAAY,WAAWC,cAAY,yBAAyBC,gBAAc,wBAAwBC,gBAAc,QAAQC,aAAW,qBAC9K,0BAAMR,MAAM,yBAGd,yBAAKA,MAAM,2BAA2BS,GAAG,yBACvC,wBAAIT,MAAM,sBACR,wBAAIA,MAAM,mBACR,uBAAGA,MAAM,WAAWC,KAAK,MAAzB,QAAmC,0BAAMD,MAAM,WAAZ,sB,GAZfH,IAAMC,WCArBY,E,uKAEf,OACE,yBAAKV,MAAM,aACPN,KAAKC,MAAMC,c,GAJgBC,IAAMC,WCmB9Ba,EAnBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAGb,OAFAC,QAAQC,IAAI,CAACF,UAGT,yBAAKZ,MAAM,OACXY,EAAMG,KAAI,SAACC,GAAD,OACN,8BACoC,MAA9BA,EAAKC,KAAKC,kBAA+C,MAAnBF,EAAKC,KAAKE,MAClD,yBAAKnB,MAAM,aACP,yBAAKoB,IAAMJ,EAAKC,KAAKI,IAAMC,IAAI,GAAGC,MAAM,QAAQC,OAAO,WAEzD,SCuBHC,E,4MAfbC,MAAQ,CACJd,MAAO,I,uDAXT,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQV,MAAM,8BACd,kBAAC,EAAD,KACE,kBAACyB,EAAD,CAAMf,MAAQlB,KAAKgC,MAAMd,Y,0CAUZ,IAAD,OAChBgB,MAAM,0DACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACZ,GACHJ,QAAQC,IAAIG,EAAKA,KAAKrB,UACtB,EAAKoC,SAAS,CAAEpB,MAAOK,EAAKA,KAAKrB,cAEpCqC,MAAMpB,QAAQC,S,GAvBHhB,aCGEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.da88ac6a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Layout extends React.Component {\n    render() {\n\n      return ( \n        <div>\n          { this.props.children }\n        </div>\n      );\n    }\n  }","import React from 'react';\n\nexport default class Header extends React.Component {\n    render() {\n      return (\n        <nav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n          <a class=\"navbar-brand\" href=\"/#\">{ this.props.title }</a>\n          <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n          </button>\n  \n          <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n            <ul class=\"navbar-nav mr-auto\">\n              <li class=\"nav-item active\">\n                <a class=\"nav-link\" href=\"/#\">Home <span class=\"sr-only\">(current)</span></a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      );\n    }\n  }","import React from 'react';\n\nexport default class Container extends React.Component {\n    render() {\n      return (\n        <div class=\"container\">\n          { this.props.children }\n        </div>\n      );\n    }\n  }","import React from 'react';\n\nconst Cards = ({ cards }) => {\n    console.log({cards})\n\n    return (\n        <div class=\"row\">\n       {cards.map((card) => (\n            <span>\n                { card.data.crosspost_parent == null && card.data.media == null ? \n                <div class=\"card mb-4\">\n                    <img src={ card.data.url } alt=\"\" width=\"400px\" height=\"300px\"/>\n                </div>\n                : \"\"\n                }\n            </span>\n       ))}\n       </div>\n    )\n}\n\nexport default Cards","import React, { Component } from 'react';\nimport './App.css';\n\nimport Layout from './Componets/Layout';\nimport Header from './Componets/Header';\nimport Container from './Componets/Container';\nimport Card from './Componets/Card';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <Header title=\"Baby HIPPPPPPOOOOOOOOOOOO\"/>\n        <Container>\n          <Card cards={ this.state.cards } />\n        </Container>\n      </Layout>\n    );\n  }\n\n  state = {\n      cards: []\n  };\n\n  componentDidMount() {\n      fetch('https://www.reddit.com/r/babyhippos/hot/.json?count=20')\n      .then(res => res.json())\n      .then((data) => {\n          console.log(data.data.children);\n          this.setState({ cards: data.data.children })\n      })\n      .catch(console.log)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}